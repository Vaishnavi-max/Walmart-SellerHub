import React, { useState, useRef, useEffect } from 'react';
import { 
  Send, 
  Bot, 
  User, 
  Mic, 
  MicOff, 
  Volume2, 
  Languages,
  Lightbulb,
  TrendingUp,
  Package,
  DollarSign,
  Loader
} from 'lucide-react';
import { ChatMessage } from '../types';
import { translationService } from '../services/translationService';
import { voiceService } from '../services/voiceService';
import VoiceAssistant from './VoiceAssistant';

const Chatbot: React.FC = () => {
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      message: 'Hello! I\'m your AI assistant. I can help you with product optimization, inventory management, marketing insights, and much more. How can I assist you today?',
      type: 'ai',
      timestamp: new Date(),
      suggestions: [
        'Optimize my product descriptions',
        'Check inventory levels',
        'Marketing recommendations',
        'Sales analytics'
      ]
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [selectedLanguage, setSelectedLanguage] = useState('en');
  const [isTyping, setIsTyping] = useState(false);
  const [isVoiceMode, setIsVoiceMode] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const supportedLanguages = translationService.getSupportedLanguages();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async (message: string) => {
    if (!message.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      message: message,
      type: 'user',
      timestamp: new Date(),
      language: selectedLanguage
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate AI response
    setTimeout(() => {
      const aiResponse = generateAIResponse(message);
      setMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
      
      // Speak the response if voice mode is enabled
      if (isVoiceMode) {
        voiceService.speakWithSarvam(aiResponse.message, selectedLanguage);
      }
    }, 1500);
  };

  const generateAIResponse = (userMessage: string): ChatMessage => {
    const lowerMessage = userMessage.toLowerCase();
    let response = '';
    let suggestions: string[] = [];

    // Multilingual responses based on selected language
    const t = (key: string) => translationService.translate(key, selectedLanguage);

    if (lowerMessage.includes('description') || lowerMessage.includes('optimize') || lowerMessage.includes('рдЙрддреНрдкрд╛рдж') || lowerMessage.includes('ржкржгрзНржп')) {
      response = selectedLanguage === 'hi' 
        ? 'рдореИрдВ рдЖрдкрдХреЗ рдЙрддреНрдкрд╛рдж рд╡рд┐рд╡рд░рдг рдХреЛ рдЕрдиреБрдХреВрд▓рд┐рдд рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ! рдпрд╣рд╛рдБ рдХреБрдЫ рд╕реБрдЭрд╛рд╡ рд╣реИрдВ:\n\nтАв рдХреНрд░рд┐рдпрд╛ рд╢рдмреНрджреЛрдВ рдФрд░ рд▓рд╛рдн-рдХреЗрдВрджреНрд░рд┐рдд рднрд╛рд╖рд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ\nтАв SEO рдХреЗ рд▓рд┐рдП рдкреНрд░рд╛рд╕рдВрдЧрд┐рдХ рдХреАрд╡рд░реНрдб рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ\nтАв рд╡рд┐рд╡рд░рдг рд╕рдВрдХреНрд╖рд┐рдкреНрдд рд▓реЗрдХрд┐рди рдЬрд╛рдирдХрд╛рд░реАрдкреВрд░реНрдг рд░рдЦреЗрдВ\nтАв рд░реВрдкрд╛рдВрддрд░рдг рдмрдврд╝рд╛рдиреЗ рдХреЗ рд▓рд┐рдП рднрд╛рд╡рдирд╛рддреНрдордХ рдЯреНрд░рд┐рдЧрд░ рдЬреЛрдбрд╝реЗрдВ\n\nрдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдХрд┐ рдореИрдВ рдХрд┐рд╕реА рд╡рд┐рд╢рд┐рд╖реНрдЯ рдЙрддреНрдкрд╛рдж рд╡рд┐рд╡рд░рдг рдХреА рд╕рдореАрдХреНрд╖рд╛ рдХрд░реВрдВ?'
        : selectedLanguage === 'bn'
        ? 'ржЖржорж┐ ржЖржкржирж╛рж░ ржкржгрзНржпрзЗрж░ ржмрж┐ржмрж░ржг ржЕржкрзНржЯрж┐ржорж╛ржЗржЬ ржХрж░рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐! ржПржЦрж╛ржирзЗ ржХрж┐ржЫрзБ ржкрж░рж╛ржорж░рзНрж╢:\n\nтАв ржХрзНрж░рж┐ржпрж╝рж╛ рж╢ржмрзНржж ржПржмржВ рж╕рзБржмрж┐ржзрж╛-ржХрзЗржирзНржжрзНрж░рж┐ржХ ржнрж╛рж╖рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи\nтАв SEO ржПрж░ ржЬржирзНржп ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ ржХрзАржУржпрж╝рж╛рж░рзНржб ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи\nтАв ржмрж┐ржмрж░ржг рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржХрж┐ржирзНрждрзБ рждржерзНржпржкрзВрж░рзНржг рж░рж╛ржЦрзБржи\nтАв рж░рзВржкрж╛ржирзНрждрж░ ржмрзГржжрзНржзрж┐рж░ ржЬржирзНржп ржЖржмрзЗржЧржоржпрж╝ ржЯрзНрж░рж┐ржЧрж╛рж░ ржпрзЛржЧ ржХрж░рзБржи\n\nржЖржкржирж┐ ржХрж┐ ржЪрж╛ржи ржпрзЗ ржЖржорж┐ ржПржХржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржкржгрзНржпрзЗрж░ ржмрж┐ржмрж░ржг ржкрж░рзНржпрж╛рж▓рзЛржЪржирж╛ ржХрж░рж┐?'
        : 'I can help optimize your product descriptions! Here are some suggestions:\n\nтАв Use action words and benefits-focused language\nтАв Include relevant keywords for SEO\nтАв Keep descriptions concise but informative\nтАв Add emotional triggers to increase conversions\n\nWould you like me to review a specific product description?';
      
      suggestions = selectedLanguage === 'hi' 
        ? ['рдореЗрд░реЗ рдЯреЙрдк рдЙрддреНрдкрд╛рдж рдХреА рд╕рдореАрдХреНрд╖рд╛ рдХрд░реЗрдВ', 'SEO рдЕрдиреБрдХреВрд▓рди рдЯрд┐рдкреНрд╕', 'рдкреНрд░рддрд┐рдпреЛрдЧреА рд╡рд┐рд╢реНрд▓реЗрд╖рдг']
        : selectedLanguage === 'bn'
        ? ['ржЖржорж╛рж░ рж╢рзАрж░рзНрж╖ ржкржгрзНржп ржкрж░рзНржпрж╛рж▓рзЛржЪржирж╛ ржХрж░рзБржи', 'SEO ржЕржкрзНржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи ржЯрж┐ржкрж╕', 'ржкрзНрж░рждрж┐ржпрзЛржЧрзА ржмрж┐рж╢рзНрж▓рзЗрж╖ржг']
        : ['Review my top product', 'SEO optimization tips', 'Competitor analysis'];
    } 
    else if (lowerMessage.includes('inventory') || lowerMessage.includes('stock') || lowerMessage.includes('рдЗрдиреНрд╡реЗрдВрдЯрд░реА') || lowerMessage.includes('ржЗржиржнрзЗржирзНржЯрж░рж┐')) {
      response = selectedLanguage === 'hi'
        ? 'рдЖрдкрдХреЗ рд╡рд░реНрддрдорд╛рди рдЗрдиреНрд╡реЗрдВрдЯрд░реА рдбреЗрдЯрд╛ рдХреЗ рдЖрдзрд╛рд░ рдкрд░:\n\nЁЯУж 3 рдЙрддреНрдкрд╛рджреЛрдВ рдХрд╛ рд╕реНрдЯреЙрдХ рдХрдо рд╣реИ\nтЪая╕П рд╡рд╛рдпрд░рд▓реЗрд╕ рд╣реЗрдбрдлреЛрдиреНрд╕ рдХреЛ рд░реАрд╕реНрдЯреЙрдХ рдХрд░рдиреЗ рдХреА рдЬрд░реВрд░рдд рд╣реИ (рдХреЗрд╡рд▓ 15 рдмрдЪреЗ рд╣реИрдВ)\nтЬЕ рд╕реНрдорд╛рд░реНрдЯ рд╡реЙрдЪ рдЗрдиреНрд╡реЗрдВрдЯрд░реА рд╕реНрд╡рд╕реНрде рд╣реИ\n\nрдореИрдВ рд╕реБрдЭрд╛рддрд╛ рд╣реВрдБ:\nтАв рддреЗрдЬрд╝реА рд╕реЗ рдмрд┐рдХрдиреЗ рд╡рд╛рд▓реА рд╡рд╕реНрддреБрдУрдВ рдХреЗ рд▓рд┐рдП рдСрдЯреЛ-рд░реАрдСрд░реНрдбрд░ рд╕реЗрдЯ рдХрд░реЗрдВ\nтАв рдореМрд╕рдореА рдЙрддреНрдкрд╛рджреЛрдВ рдХреЗ рд▓рд┐рдП рдЗрдиреНрд╡реЗрдВрдЯрд░реА рдмрдврд╝рд╛рдПрдВ\nтАв рдмрд▓реНрдХ рдЦрд░реАрджрд╛рд░реА рдЫреВрдЯ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ'
        : selectedLanguage === 'bn'
        ? 'ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржЗржиржнрзЗржирзНржЯрж░рж┐ ржбрзЗржЯрж╛рж░ ржнрж┐рждрзНрждрж┐рждрзЗ:\n\nЁЯУж рзйржЯрж┐ ржкржгрзНржпрзЗрж░ рж╕рзНржЯржХ ржХржо\nтЪая╕П ржУржпрж╝рзНржпрж╛рж░рж▓рзЗрж╕ рж╣рзЗржбржлрзЛржирзЗрж░ ржкрзБржиржГрж╕рзНржЯржХ ржкрзНрж░ржпрж╝рзЛржЬржи (ржорж╛рждрзНрж░ рззрзлржЯрж┐ ржмрж╛ржХрж┐)\nтЬЕ рж╕рзНржорж╛рж░рзНржЯ ржУржпрж╝рж╛ржЪ ржЗржиржнрзЗржирзНржЯрж░рж┐ рж╕рзБрж╕рзНрже\n\nржЖржорж┐ рж╕рзБржкрж╛рж░рж┐рж╢ ржХрж░рж┐:\nтАв ржжрзНрж░рзБржд ржмрж┐ржХрзНрж░рж┐ рж╣ржУржпрж╝рж╛ ржЖржЗржЯрзЗржорзЗрж░ ржЬржирзНржп ржЕржЯрзЛ-рж░рж┐ржЕрж░рзНржбрж╛рж░ рж╕рзЗржЯ ржХрж░рзБржи\nтАв ржорзМрж╕рзБржорзА ржкржгрзНржпрзЗрж░ ржЬржирзНржп ржЗржиржнрзЗржирзНржЯрж░рж┐ ржмрзГржжрзНржзрж┐ ржХрж░рзБржи\nтАв ржмрж╛рж▓рзНржХ ржХрзНрж░ржпрж╝ ржЫрж╛ржбрж╝ ржмрж┐ржмрзЗржЪржирж╛ ржХрж░рзБржи'
        : 'Based on your current inventory data:\n\nЁЯУж 3 products are running low on stock\nтЪая╕П Wireless Headphones need restocking (only 15 left)\nтЬЕ Smart Watch inventory is healthy\n\nI recommend:\nтАв Set up auto-reorder for fast-moving items\nтАв Increase inventory for seasonal products\nтАв Consider bulk purchasing discounts';
      
      suggestions = selectedLanguage === 'hi'
        ? ['рдСрдЯреЛ-рд░реАрдСрд░реНрдбрд░ рд╕реЗрдЯ рдХрд░реЗрдВ', 'рдХрдо рд╕реНрдЯреЙрдХ рдЖрдЗрдЯрдо рджреЗрдЦреЗрдВ', 'рдЗрдиреНрд╡реЗрдВрдЯрд░реА рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди']
        : selectedLanguage === 'bn'
        ? ['ржЕржЯрзЛ-рж░рж┐ржЕрж░рзНржбрж╛рж░ рж╕рзЗржЯ ржХрж░рзБржи', 'ржХржо рж╕рзНржЯржХ ржЖржЗржЯрзЗржо ржжрзЗржЦрзБржи', 'ржЗржиржнрзЗржирзНржЯрж░рж┐ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕']
        : ['Set up auto-reorder', 'View low stock items', 'Inventory forecasting'];
    }
    else if (lowerMessage.includes('marketing') || lowerMessage.includes('sales') || lowerMessage.includes('рдорд╛рд░реНрдХреЗрдЯрд┐рдВрдЧ') || lowerMessage.includes('ржмрж┐ржкржгржи')) {
      response = selectedLanguage === 'hi'
        ? 'рдЖрдкрдХреЗ рд╕реНрдЯреЛрд░ рдХреЗ рд▓рд┐рдП рд╡реНрдпрдХреНрддрд┐рдЧрдд рдорд╛рд░реНрдХреЗрдЯрд┐рдВрдЧ рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐:\n\nЁЯУИ рдЖрдкрдХреА рд░реВрдкрд╛рдВрддрд░рдг рджрд░ (3.2%) рдФрд╕рдд рд╕реЗ рдКрдкрд░ рд╣реИ\nЁЯОп рдЗрд▓реЗрдХреНрдЯреНрд░реЙрдирд┐рдХреНрд╕ рд╢реНрд░реЗрдгреА рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ рдкреНрд░рджрд░реНрд╢рди рдХрд░ рд░рд╣реА рд╣реИ\nЁЯТ░ рдФрд╕рдд рдСрд░реНрдбрд░ рдореВрд▓реНрдп: тВ╣2,485\n\nрд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ:\nтАв рдХрдкрдбрд╝реЛрдВ рдХреА рд╢реНрд░реЗрдгреА рдХреЗ рд▓рд┐рдП рд▓рдХреНрд╖рд┐рдд рд╡рд┐рдЬреНрдЮрд╛рдкрди рдЪрд▓рд╛рдПрдВ\nтАв рдЗрд▓реЗрдХреНрдЯреНрд░реЙрдирд┐рдХреНрд╕ рдХреЗ рд▓рд┐рдП рдмрдВрдбрд▓ рдСрдлрд░ рдмрдирд╛рдПрдВ\nтАв рдХрд╛рд░реНрдЯ рдЫреЛрдбрд╝рдиреЗ рд╡рд╛рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рдИрдореЗрд▓ рд░реАрдЯрд╛рд░реНрдЧреЗрдЯрд┐рдВрдЧ рд▓рд╛рдЧреВ рдХрд░реЗрдВ'
        : selectedLanguage === 'bn'
        ? 'ржЖржкржирж╛рж░ рж╕рзНржЯрзЛрж░рзЗрж░ ржЬржирзНржп ржмрзНржпржХрзНрждрж┐ржЧржд ржмрж┐ржкржгржи ржЕржирзНрждрж░рзНржжрзГрж╖рзНржЯрж┐:\n\nЁЯУИ ржЖржкржирж╛рж░ рж░рзВржкрж╛ржирзНрждрж░ рж╣рж╛рж░ (рзй.рзи%) ржЧржбрж╝рзЗрж░ ржЪрзЗржпрж╝рзЗ ржмрзЗрж╢рж┐\nЁЯОп ржЗрж▓рзЗржХржЯрзНрж░ржирж┐ржХрзНрж╕ ржмрж┐ржнрж╛ржЧ рж╕рзЗрж░рж╛ ржкрж╛рж░ржлрж░ржорзНржпрж╛ржирзНрж╕ ржХрж░ржЫрзЗ\nЁЯТ░ ржЧржбрж╝ ржЕрж░рзНржбрж╛рж░ ржорзВрж▓рзНржп: тВ╣рзи,рзкрзорзл\n\nрж╕рзБржкрж╛рж░рж┐рж╢:\nтАв ржкрзЛрж╢рж╛ржХ ржмрж┐ржнрж╛ржЧрзЗрж░ ржЬржирзНржп рж▓ржХрзНрж╖рзНржпржмржжрзНржз ржмрж┐ржЬрзНржЮрж╛ржкржи ржЪрж╛рж▓рж╛ржи\nтАв ржЗрж▓рзЗржХржЯрзНрж░ржирж┐ржХрзНрж╕рзЗрж░ ржЬржирзНржп ржмрж╛ржирзНржбрж▓ ржЕржлрж╛рж░ рждрзИрж░рж┐ ржХрж░рзБржи\nтАв ржХрж╛рж░рзНржЯ ржкрж░рж┐рждрзНржпрж╛ржЧржХрж╛рж░рзАржжрзЗрж░ ржЬржирзНржп ржЗржорзЗржЗрж▓ рж░рж┐ржЯрж╛рж░рзНржЧрзЗржЯрж┐ржВ ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рзБржи'
        : 'Here are personalized marketing insights for your store:\n\nЁЯУИ Your conversion rate (3.2%) is above average\nЁЯОп Electronics category performing best\nЁЯТ░ Average order value: тВ╣2,485\n\nRecommendations:\nтАв Run targeted ads for clothing category\nтАв Create bundle offers for electronics\nтАв Implement email retargeting for cart abandoners';
      
      suggestions = selectedLanguage === 'hi'
        ? ['рд╡рд┐рдЬреНрдЮрд╛рдкрди рдЕрднрд┐рдпрд╛рди рдмрдирд╛рдПрдВ', 'рдИрдореЗрд▓ рдСрдЯреЛрдореЗрд╢рди рд╕реЗрдЯ рдХрд░реЗрдВ', 'рдмрдВрдбрд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ']
        : selectedLanguage === 'bn'
        ? ['ржмрж┐ржЬрзНржЮрж╛ржкржи ржкрзНрж░ржЪрж╛рж░рж╛ржнрж┐ржпрж╛ржи рждрзИрж░рж┐ ржХрж░рзБржи', 'ржЗржорзЗржЗрж▓ ржЕржЯрзЛржорзЗрж╢ржи рж╕рзЗржЯ ржХрж░рзБржи', 'ржмрж╛ржирзНржбрж▓ рж╕рзБржкрж╛рж░рж┐рж╢']
        : ['Create ad campaign', 'Set up email automation', 'Bundle recommendations'];
    }
    else {
      response = selectedLanguage === 'hi'
        ? 'рдореИрдВ рд╕рдордЭрддрд╛ рд╣реВрдБ рдХрд┐ рдЖрдкрдХреЛ рдЕрдкрдиреЗ рд╡реНрдпрд╛рдкрд╛рд░ рдореЗрдВ рдорджрдж рдЪрд╛рд╣рд┐рдПред рдореИрдВ рдЗрдирдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ:\n\nтАв рдЙрддреНрдкрд╛рдж рд▓рд┐рд╕реНрдЯрд┐рдВрдЧ рдЕрдиреБрдХреВрд▓рди\nтАв рдЗрдиреНрд╡реЗрдВрдЯрд░реА рдкреНрд░рдмрдВрдзрди\nтАв рдорд╛рд░реНрдХреЗрдЯрд┐рдВрдЧ рд░рдгрдиреАрддрд┐рдпрд╛рдБ\nтАв рдмрд┐рдХреНрд░реА рд╡рд┐рд╢реНрд▓реЗрд╖рдг\nтАв рдСрд░реНрдбрд░ рдкреВрд░реНрддрд┐\nтАв рдкреНрд░рддрд┐рд╕реНрдкрд░реНрдзреА рд╡рд┐рд╢реНрд▓реЗрд╖рдг\n\nрдЖрдк рдХрд┐рд╕ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдХреНрд╖реЗрддреНрд░ рдкрд░ рдзреНрдпрд╛рди рджреЗрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?'
        : selectedLanguage === 'bn'
        ? 'ржЖржорж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░ржЫрж┐ ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛ржпрж╝ рж╕рж╛рж╣рж╛ржпрзНржп ржкрзНрж░ржпрж╝рзЛржЬржиред ржЖржорж┐ ржПржЧрзБрж▓рзЛрждрзЗ рж╕рж╣рж╛ржпрж╝рждрж╛ ржХрж░рждрзЗ ржкрж╛рж░рж┐:\n\nтАв ржкржгрзНржп рждрж╛рж▓рж┐ржХрж╛ ржЕржкрзНржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи\nтАв ржЗржиржнрзЗржирзНржЯрж░рж┐ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛\nтАв ржмрж┐ржкржгржи ржХрзМрж╢рж▓\nтАв ржмрж┐ржХрзНрж░ржпрж╝ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг\nтАв ржЕрж░рзНржбрж╛рж░ ржкрзВрж░ржг\nтАв ржкрзНрж░рждрж┐ржпрзЛржЧрзА ржмрж┐рж╢рзНрж▓рзЗрж╖ржг\n\nржЖржкржирж┐ ржХрзЛржи ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржПрж▓рж╛ржХрж╛ржпрж╝ ржлрзЛржХрж╛рж╕ ржХрж░рждрзЗ ржЪрж╛ржи?'
        : 'I understand you need help with your business. I can assist with:\n\nтАв Product listing optimization\nтАв Inventory management\nтАв Marketing strategies\nтАв Sales analytics\nтАв Order fulfillment\nтАв Competitive analysis\n\nWhat specific area would you like to focus on?';
      
      suggestions = selectedLanguage === 'hi'
        ? ['рдЙрддреНрдкрд╛рдж рдЕрдиреБрдХреВрд▓рди', 'рдорд╛рд░реНрдХреЗрдЯрд┐рдВрдЧ рд╕рд╣рд╛рдпрддрд╛', 'рдЗрдиреНрд╡реЗрдВрдЯрд░реА рдЬрд╛рдВрдЪ', 'рдмрд┐рдХреНрд░реА рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐']
        : selectedLanguage === 'bn'
        ? ['ржкржгрзНржп ржЕржкрзНржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи', 'ржмрж┐ржкржгржи рж╕рж╣рж╛ржпрж╝рждрж╛', 'ржЗржиржнрзЗржирзНржЯрж░рж┐ ржЪрзЗржХ', 'ржмрж┐ржХрзНрж░ржпрж╝ ржЕржирзНрждрж░рзНржжрзГрж╖рзНржЯрж┐']
        : ['Product optimization', 'Marketing help', 'Inventory check', 'Sales insights'];
    }

    return {
      id: Date.now().toString(),
      message: response,
      type: 'ai',
      timestamp: new Date(),
      suggestions,
      language: selectedLanguage
    };
  };

  const handleSuggestionClick = (suggestion: string) => {
    handleSendMessage(suggestion);
  };

  const handleVoiceTranscript = (transcript: string) => {
    setInputMessage(transcript);
    // Auto-send voice messages
    setTimeout(() => {
      handleSendMessage(transcript);
    }, 500);
  };

  const quickActions = [
    {
      icon: Lightbulb,
      title: translationService.translate('products', selectedLanguage),
      description: 'Get AI suggestions for better product listings',
      color: 'bg-yellow-50 text-yellow-600 border-yellow-200'
    },
    {
      icon: TrendingUp,
      title: 'Marketing Insights',
      description: 'Personalized marketing recommendations',
      color: 'bg-green-50 text-green-600 border-green-200'
    },
    {
      icon: Package,
      title: 'Inventory Check',
      description: 'Monitor stock levels and get reorder alerts',
      color: 'bg-blue-50 text-blue-600 border-blue-200'
    },
    {
      icon: DollarSign,
      title: 'Sales Analytics',
      description: 'View detailed performance metrics',
      color: 'bg-purple-50 text-purple-600 border-purple-200'
    }
  ];

  return (
    <div className="p-6 h-full flex flex-col">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">
            {translationService.translate('chatbot', selectedLanguage)}
          </h1>
          <p className="text-gray-600 mt-1">Your intelligent business companion</p>
        </div>
        <div className="flex items-center space-x-3">
          <button
            onClick={() => setIsVoiceMode(!isVoiceMode)}
            className={`px-3 py-2 rounded-lg flex items-center space-x-2 transition-colors duration-200 ${
              isVoiceMode 
                ? 'bg-green-100 text-green-700 border border-green-300' 
                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
            }`}
          >
            {isVoiceMode ? <Volume2 className="w-4 h-4" /> : <MicOff className="w-4 h-4" />}
            <span className="text-sm">Voice Mode</span>
          </button>
          <select
            value={selectedLanguage}
            onChange={(e) => setSelectedLanguage(e.target.value)}
            className="border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            {supportedLanguages.map(lang => (
              <option key={lang.code} value={lang.code}>{lang.native}</option>
            ))}
          </select>
        </div>
      </div>

      {/* Voice Assistant Panel */}
      {isVoiceMode && (
        <div className="mb-6">
          <VoiceAssistant
            selectedLanguage={selectedLanguage}
            onLanguageChange={setSelectedLanguage}
            onTranscript={handleVoiceTranscript}
            isActive={isVoiceMode}
          />
        </div>
      )}

      {/* Quick Actions */}
      {messages.length <= 1 && !isVoiceMode && (
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {quickActions.map((action, index) => {
              const Icon = action.icon;
              return (
                <button
                  key={index}
                  onClick={() => handleSendMessage(action.title)}
                  className={`p-4 rounded-lg border-2 border-dashed transition-all duration-200 hover:border-solid hover:shadow-md ${action.color}`}
                >
                  <Icon className="w-6 h-6 mb-2" />
                  <h4 className="font-semibold mb-1">{action.title}</h4>
                  <p className="text-xs opacity-75">{action.description}</p>
                </button>
              );
            })}
          </div>
        </div>
      )}

      {/* Chat Messages */}
      <div className="flex-1 bg-white rounded-lg shadow-sm border border-gray-100 flex flex-col">
        <div className="flex-1 p-4 overflow-y-auto space-y-4">
          {messages.map((message) => (
            <div key={message.id} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
              <div className={`flex items-start space-x-3 max-w-xs lg:max-w-md ${message.type === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                  message.type === 'user' ? 'bg-blue-600' : 'bg-gray-100'
                }`}>
                  {message.type === 'user' ? (
                    <User className="w-4 h-4 text-white" />
                  ) : (
                    <Bot className="w-4 h-4 text-gray-600" />
                  )}
                </div>
                <div className={`rounded-lg p-3 ${
                  message.type === 'user' 
                    ? 'bg-blue-600 text-white' 
                    : 'bg-gray-50 text-gray-900'
                }`}>
                  <p className="text-sm whitespace-pre-line">{message.message}</p>
                  <p className="text-xs mt-1 opacity-75">
                    {message.timestamp.toLocaleTimeString()}
                  </p>
                  {message.language && message.language !== 'en' && (
                    <p className="text-xs mt-1 opacity-60">
                      {supportedLanguages.find(l => l.code === message.language)?.native}
                    </p>
                  )}
                </div>
              </div>
            </div>
          ))}

          {isTyping && (
            <div className="flex justify-start">
              <div className="flex items-start space-x-3">
                <div className="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center">
                  <Bot className="w-4 h-4 text-gray-600" />
                </div>
                <div className="bg-gray-50 rounded-lg p-3">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {messages[messages.length - 1]?.suggestions && messages[messages.length - 1]?.type === 'ai' && (
            <div className="flex justify-start">
              <div className="flex items-start space-x-3">
                <div className="w-8 h-8"></div>
                <div className="space-y-2">
                  <p className="text-xs text-gray-500 mb-2">Quick suggestions:</p>
                  {messages[messages.length - 1].suggestions?.map((suggestion, index) => (
                    <button
                      key={index}
                      onClick={() => handleSuggestionClick(suggestion)}
                      className="block bg-white border border-gray-200 rounded-lg px-3 py-2 text-sm text-gray-700 hover:bg-blue-50 hover:border-blue-200 hover:text-blue-700 transition-colors duration-200"
                    >
                      {suggestion}
                    </button>
                  ))}
                </div>
              </div>
            </div>
          )}

          <div ref={messagesEndRef} />
        </div>

        {/* Input Area */}
        <div className="border-t border-gray-200 p-4">
          <div className="flex items-center space-x-3">
            <div className="flex-1 relative">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage(inputMessage)}
                placeholder={`Type your message... (${supportedLanguages.find(l => l.code === selectedLanguage)?.native})`}
                className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            
            <button
              onClick={() => handleSendMessage(inputMessage)}
              disabled={!inputMessage.trim()}
              className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-300 text-white p-2 rounded-lg transition-colors duration-200"
            >
              <Send className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Chatbot;